{"version":3,"sources":["components/SurfReport.js","components/SurfReport.functions.js","components/App.js","serviceWorker.js","index.js"],"names":["SurfReport","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buoyRecords","APD","DD","MM","MWD","STEEPNESS","SwD","SwH","SwP","WVHT","WWD","WWH","WWP","YY","hh","mm","lastUpdate","_this2","fetch","then","resp","text","data","dataRowObjects","split","map","row","filter","e","slice","newRow","assignObjects","setState","last","lastUpdatedTime","concat","windDirection","windDirectionScore","swellPeriod","swellPeriodScore","waveSize","waveSizeScore","getWaveSizeScore","combinedSurfScore","toFixed","react_default","a","createElement","className","id","style","fontSize","background","color","Component","App","src_components_SurfReport","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bbc346ec.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './SurfReport.css';\nimport { getWindDirectionScore, getWaveSizeScore, getSwellPeriodScore } from './SurfReport.functions';\n\nclass SurfReport extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      buoyRecords: [\n        {\n          APD: \"7.2\",\n          DD: \"21\",\n          MM: \"03\",\n          MWD: \"243\",\n          STEEPNESS: \"SWELL\",\n          SwD: \"WSW\",\n          SwH: \"1.7\",\n          SwP: \"12.9\",\n          WVHT: \"1.8\",\n          WWD: \"SSW\",\n          WWH: \"0.6\",\n          WWP: \"4.2\",\n          YY: \"2019\",\n          hh: \"22\",\n          mm: \"00\"\n        }\n      ],\n      lastUpdate: {\n        APD: \"7.2\",\n        DD: \"21\",\n        MM: \"03\",\n        MWD: \"243\",\n        STEEPNESS: \"SWELL\",\n        SwD: \"WSW\",\n        SwH: \"1.7\",\n        SwP: \"12.9\",\n        WVHT: \"1.8\",\n        WWD: \"SSW\",\n        WWH: \"0.6\",\n        WWP: \"4.2\",\n        YY: \"2019\",\n        hh: \"22\",\n        mm: \"00\"\n      }\n    }\n  }\n\n  componentDidMount() {\n    let url = 'https://www.ndbc.noaa.gov/data/realtime2/46029.spec';\n\n    fetch(url)\n      .then((resp) => resp.text())\n      .then((data) => {\n       function parseRow(string) {\n         const parsedRowArray = string.split(/\\s/).filter((e) => e !== '')\n         return parsedRowArray\n       }\n\n       let separateRows = data.split(/\\n/)\n       let parsedRows = separateRows.map(row => parseRow(row))\n\n       let dataRows = parsedRows.slice(2)\n       function assignObjects(e) {\n           let newRow = {};\n           newRow['YY'] = e[0];\n           newRow['MM'] = e[1];\n           newRow['DD'] = e[2];\n           newRow['hh'] = e[3];\n           newRow['mm'] = e[4];\n           newRow['WVHT'] = e[5];\n           newRow['SwH'] = e[6];\n           newRow['SwP'] = e[7];\n           newRow['WWH'] = e[8];\n           newRow['WWP'] = e[9];\n           newRow['SwD'] = e[10];\n           newRow['WWD'] = e[11];\n           newRow['STEEPNESS'] = e[12];\n           newRow['APD'] = e[13];\n           newRow['MWD'] = e[14];\n         return newRow;\n       }\n\n      let dataRowObjects = dataRows.map(row => assignObjects(row))\n      this.setState({buoyRecords: dataRowObjects, lastUpdate: dataRowObjects[0]})\n     });\n\n  }\n\n  render() {\n    const last = this.state.lastUpdate\n    const lastUpdatedTime = `${last.MM}/${last.DD}/${last.YY} @ ${last.hh}:${last.mm}`\n\n    const windDirection = last.SwD\n    const windDirectionScore = getWindDirectionScore(last.WWD);\n\n    const swellPeriod = last.SwP\n    const swellPeriodScore = getSwellPeriodScore(last.SwP)\n\n    const waveSize = last.SwP * last.SwH\n    const waveSizeScore = getWaveSizeScore(last.SwP, last.SwH)\n\n    const combinedSurfScore = ((windDirectionScore + swellPeriodScore + waveSizeScore) / 3).toFixed(2);\n\n    return(\n      <div className='wrapper'>\n\n        <div className='property' id='summary'>\n          <p style={{fontSize: '2.5em', background: 'black', color: 'white'}}>Today's Surf Score:</p>\n          <p id='surf-score'>{combinedSurfScore}</p>\n          <code>Last Updated: <br/>{lastUpdatedTime} <br/>(hourly)</code>\n        </div>\n\n        <div className='property'>\n          <p style={{background: 'black', color: 'white'}}>Wind Direction</p>\n          <p style={{fontSize: '3em'}}>{windDirection} <span style={{fontSize: '.4em'}}>&#8598;</span></p>\n          <p style={{fontSize: '1.4em', background: 'black', color: 'white'}}>{windDirectionScore}</p>\n        </div>\n\n        <div className='property'>\n          <p style={{background: 'black', color: 'white'}}>Swell Period</p>\n          <p style={{fontSize: '3em'}}>{swellPeriod}<span style={{fontSize: '.4em'}}>seconds</span></p>\n          <p style={{fontSize: '1.4em', background: 'black', color: 'white'}}>{swellPeriodScore}</p>\n        </div>\n\n        <div className='property'>\n        <p style={{background: 'black', color: 'white'}}>Wave Size</p>\n          <p style={{fontSize: '3em'}}>{waveSize}<span style={{fontSize: '.4em'}}>meters</span></p>\n          <p style={{fontSize: '1.4em', background: 'black', color: 'white'}}>{waveSizeScore}</p>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default SurfReport;\n","function getWindDirectionScore(WWD) {\n  if(WWD == 'E') {\n    return 5;\n  } else if (WWD == 'NE'){\n    return 4;\n  } else if(WWD == 'SE'){\n    return 4;\n  } else if(WWD == 'S'){\n    return 3;\n  } else {\n    return 1;\n  }\n}\n\nfunction getSwellPeriodScore(SwP) {\n  if(SwP < 10) {\n    return 1;\n  } else if (SwP >= 10 && SwP < 12){\n    return 2;\n  } else if(SwP >= 12 && SwP < 16){\n    return 3;\n  } else if(SwP >= 16){\n    return 5;\n  }\n}\n\nfunction getWaveSizeScore(SwP, SwH) {\n  const waveSize = SwP * SwH;\n  if(waveSize < 10) {\n    return 1;\n  } else if (waveSize > 10 && waveSize <= 19){\n    return 2;\n  } else if(waveSize > 19 && waveSize <= 24){\n    return 3;\n  } else if(waveSize > 24 && waveSize <= 30){\n    return 4;\n  } else if(waveSize > 30){\n    return 5;\n  }\n}\n\nexport { getWindDirectionScore, getWaveSizeScore, getSwellPeriodScore }\n","import React, { Component } from 'react';\n\nimport SurfReport from './SurfReport';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <SurfReport />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}